# Uncomment to enable profiling
# zmodload zsh/zprof

setopt clobber
setopt share_history

# Source Zgen and create init file if necessary
# Add custom Zsh plugins to .zgen-setup.zsh
source ~/.rad-shell/rad-init.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# Add customizations below

# Theme configuration
export ENABLE_DOCKER_PROMPT=true
export LAZY_NODE_PROMPT=true

# Editor configuration
export VISUAL=idea
export EDITOR=vi

# Local code configuration
export PROJECTS_DIR="$HOME/code"
export DOTFILES_DIR="$HOME/code/dotfiles"

# Language configuration


# Ruby
#export PATH="$HOME/.rvm/bin:$PATH"

# Python
export PATH="/usr/local/opt/python/libexec/bin:$PATH"

# Github configuration
export GHE_USERNAME=brandon-fryslie

# ---

# Misc
alias e.="${VISUAL:-vi} ."
alias dog='pygmentize -g'
git config --global core.excludesfile ~/.gitignore_global

# Move to a rad-shell plugin
# Try finding the first ethernet adapter that has a valid ipv4 address
local-ip() {
  for i in `seq 0 10`; do
    res="$(/sbin/ifconfig en${i} | grep 'inet' | grep -v inet6 | awk '{print $2}')"
    [[ -n $res ]] && echo $res && return
  done
}

AUTO_MENU=true
AUTO_LIST=true
#unsetopt listambiguous
setopt AUTO_MENU
setopt AUTO_LIST
setopt GLOB_COMPLETE
setopt COMPLETE_ALIASES
setopt AUTO_PARAM_SLASH

# TODO: move this to a plugin
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# TODO: move this to a plugin
JAVA_VERSION="temurin-11"
export JAVA_HOME="/Library/Java/JavaVirtualMachines/${JAVA_VERSION}.jdk/Contents/Home"
PATH="/Library/Java/JavaVirtualMachines/${JAVA_VERSION}.jdk/Contents/Home/bin/:${PATH}"

# what's this for?
PATH="$PATH:/opt/homebrew/opt/coreutils/libexec/gnubin:/usr/local/bin"

# TODO: plugin
export DOCKER_HOST="unix://$HOME/.lima/docker.sock"

# pyenv (TODO: move this to a plugin)
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv init --path)"
which pyenv-virtualenv-init > /dev/null && eval "$(pyenv virtualenv-init -)"
# /pyenv

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# Crazy codesigning thing
add-debug-entitlement() {
  local executable_path=$1
  rad-yellow "Adding debug entitlement to exec: ${executable_path}"
  debug_plist=$(mktemp)
  cat << EOF > $debug_plist
<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "https://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>com.apple.security.get-task-allow</key><true/></dict></plist>
EOF
  rad-yellow "Wrote debug entitlement plist to ${debug_plist}.  Executing codesign..."
  codesign -s - -v -f --entitlements ${debug_plist} ${executable_path}
  rad-green "Done!"
}

# For profiling shell startup time
# zprof
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"
export PATH="/usr/local/opt/libxml2/bin:$PATH"
